Project Darkstar Server API Changes

Version 0.9.11

- Add a method to provide guidance to applications in splitting
  work into smaller tasks

  The method TaskManager.shouldContinue() has been added

- Update use of generic collections in Channel interface

  Channel.join(Set<ClientSession> session) has been changed to
  Channel.join(Set<? extends ClientSession> session) and
  Channel.leave(Set<ClientSession> session) has been changed to
  Channel.leave(Set<? extends ClientSession> session)

  This is a compatible change with any pre-existing code that uses
  these methods.

Version 0.9.10

- Remove ManagedObject superinterface from AppListener

  This change was made to make the behavior of the AppListener
  consistent with that of ClientSessionListener and ChannelListener,
  neither of which extend the ManagedObject interface.  Only
  listeners with mutable state should explicitly implement 
  the ManagedObject interface.

- Add @RunWithNewIdentity annotation to com.sun.sgs.app package

  This addresses issue #48, allowing an application to start tasks
  that are owned by new identities.

- Add a method for getting a name binding for update

  The method DataManager.getBindingForUpdate(String) has been added.

- Add a convenience method for getting the object ID of an object
  directly, rather than from the associated ManagedReference

  The method DataManager.getObjectId() has been added.

- Clarify the states of managed objects

  The DataManager class documentation has been updated to explain the
  various states of managed objects.

Version 0.9.9

- Add support for specifying a delivery guarantee on session messages

  The method ClientSession.send(ByteBuffer, Delivery) has been
  added.

- Clarify session and channel delivery semantics

  The delivery parameter is a "delivery guarantee" and no longer
  "delivery requirement" in the classes ClientSession,
  ChannelManager, and Channel. The Javadoc for these classes
  have been modified to reflect this.

  To aid in the handling of delivery guarantees, the method
  Delivery.supportsDelivery(Delivery) has been added.

Version 0.9.8

- Add support for pluggable AppContext behavior

  A new package, com.sun.sgs.internal, has been introduced to support
  swapping out the behavior of the AppContext class.  As part of this
  package, the ManagerLocator interface was added to define this behavior,
  and the InternalContext class was added to select a behavior to use.

  The following methods also had ManagerNotFoundException added to their
  throws clause:

  - AppContext.getChannelManager
  - AppContext.getDataManager
  - AppContext.getTaskManager

- Remove the AppContext constructor

- Add new scalable data structures

  The ScalableDeque and ScalableList classes were added to the
  com.sun.sgs.util package for general use by applications.  Additionally,
  the ManagedSerializable utility class was added to this package.

- Modify TransactionNotActiveException to implement ExceptionRetryStatus


Version 0.9.6:

- Use ByteBuffer for channel and session message parameters

  Methods for sending and receiving channel and session messages have
  been modified to change the type of message parameters from byte array
  with java.nio.ByteBuffer.  This change allows the implementation to be
  more efficient by avoiding copying byte arrays.

  Methods modified:

  - Channel.send
  - ChannelListener.receivedMessage  
  - ClientSession.send
  - ClientSessionListener.receivedMessage

- Remove subset channel sends

  Methods for sending channel messages to subsets of channel members
  have been removed.  Channel messages will now be received by all
  channel members.  The subset methods were removed because it was
  difficult to provide a multi-node implementations that preserved
  ordering guarantees.  To replace the old methods, applications should
  create additional, more specific, channels, or arrange to send
  messages directly to the desired sessions.

  Methods removed:

  - Channel.send(ClientSession recipient, byte[] message)
  - Channel.send(Set<ClientSession> recipients, byte[] message)

- Make ClientSession and Channel managed objects

  The ClientSession and Channel interfaces now extend ManagedObject.
  This change means that applications can now identify sessions and
  channels using the object ID obtained from the managed reference
  associated with the object.  Applications should also use
  DataManager.removeObject to remove the resources associated with these
  objects.  These changes were made to simplify the API, and coordinate
  with the removal of session IDs in the client API.

  Changes:

  - Modified ClientSession to extend ManagedObject
  - Removed ClientSession.getSessionId 
  - Removed ClientSession.disconnect
  - Modified Channel to extend ManagedObject
  - Removed Channel.close
  - Removed the ClientSessionId interface

- Add Channel message filtering

  The behavior of the ChannelListener.receivedMessage method has been
  changed to make that method responsible for deciding what action
  should be taken when a client sends a message on a channel.  

  If a non-null ChannelListener is supplied to
  ChannelManager.createChannel, then it is up to that listener to take
  whatever action is desired in response to the message, including
  deciding whether to send the message, or whether to send a modified
  message.  If the channel is created with a null channel listener, then
  messages sent to that channel from clients will forwarded on to all
  channel members, as in previous releases.

  This change was made to provide applications with a way to assert
  control over messages sent to channels by the client.

  Along with this change, the ability to specify a ChannelListener when
  joining a channel was removed.  Instead, the listener supplied when
  creating the channel is the single point where the application can
  respond to messages sent to channels from clients.

  Changes:

  - Modified Channel.join to remove the listener parameter

- Loosen consistency guarantees for obtaining channel sessions

  The sessions reflected in the values returned by the
  Channel.getSessions and Channel.hasSessions methods are no longer
  required to reflect changes to the channel membership made in the
  current transaction.  This change was made to give the multi-node
  implementation the flexibility it needs to provide these facilities in
  an efficient way.

  Along with this change, the return type of the Channel.getSessions
  message was changed from Set<ClientSession> to
  Iterator<ClientSession>.

- Add exceptions for resource failures

  The ResourceUnavailableException class was added for use when an
  operation fails because a resource, necessary for the operation, is
  unavailable.  The MessageRejectedException subclass was added for use
  when such a failure results when an attempt to send a message.
  This exceptions were introduced to allow the application to determine
  that a resource failure had occurred.

  The following methods had MessageRejectedException added to their
  throws clause:

  - ClientSession.send
  - Channel.send
  - ClientSessionListener.receivedMessage
 
  In addition, the TaskRejectedException class was modified to extend
  ResourceUnavailableException.

- Make miscellaneous channel convenience changes

  Two methods were added to the Channel interface to permit joining and
  leaving by a set of sessions:

  - Channel.join(Set<ClientSession>)
  - Channel.leave(Set<ClientSession>)

  Also, all methods for joining, leaving, and sending messages on
  channels were modified to return the channel, to make it convenient to
  chain these method invocations.  In a similar way, the
  ClientSession.send method was modified to return the ClientSession,
  again to permit method chaining.

  Methods changed:

  - Channel.join
  - Channel.leave
  - Channel.leaveAll
  - Channel.send
  - ClientSession.send

- Add new Delivery constant

  The Delivery enumeration was modified to add the UNORDERED_RELIABLE
  constant

- Add type parameter to ManagedReference

  The ManagedReference interface has been changed to be parameterized by
  the type of the managed object it refers to.  This change was made so
  that ManagedReference could provide better compile-time type checking.

  Changes:

  - Modified ManagedReference to add a type parameter
  - Modified ManagedReference.get and getForUpdate to remove the type
    parameter and argument
  - Modified DataManager.createReference to return a parameterized
    reference

  Along with these changes, the DataManager binding methods were changed
  to remove their type parameters and arguments, which were analogous to
  the ones removed from managed references.

  In addition, the arguments and return types these methods used to
  refer to managed objects were changed from ManagedObject to Object, to
  permit the binding methods to be used with objects whose compile-time
  types do not implement ManagedObject.  These changes are intended to
  allow using variables or fields with standard interface types -- Set,
  for example -- to improve type checking and readability.  Note that
  objects stored in name bindings are still required to implement
  ManagedObject at runtime.

  Changes:

  - Modified DataManager.getBinding and setBinding to remove the type
    parameter and arguments
  - Modified DataManager.getBinding to return Object
  - Modified DataManager setBinding, removeObject, markForUpdate, and
    createReference to change the type of the object argument from
    ManagedObject to Object
