Version 0.9.12
- Added support for client session relocation to client session
  and channel services (issue #12)
- Added affinity graph builders and group finders, for load balancing
  multi-node clusters (required for issue #54)
- Fix issues #201, #213, #215, #216

Version 0.9.11:
- Introduced application level clock accessible via the watchdog service.
  The task service uses this clock instead of system time to determine
  when to run periodic and delayed tasks (issue #40)
- Added support for pluggable transaction retry policy (issue #181)
- Added details about TransactionListeners in Profiling (issue #182)
- Added TaskManager.shouldContinue (issue #185)
- Added support for configuring and running additional services in
  the core node (issue #189)
- Added support for JMX-based shutdown (issue #193)
- Added support for including extension libraries on startup (issue #194)
- Added multivalued health to node state
- Fix issues #168, #169, #171, #173, #174, #178, #183, #187, #190, #191,
  #195, #198, #199

Version 0.9.10:
- Add DataManager.getObjectId (issue #99) and
  DataManager.getBindingForUpdate (issue #120)
- AppListener no longer extends ManagedObject (issue #108)
- Split internal API classes used to write custom services, transports,
  protocols, and authenticators into a separate sgs-server-internal-api.jar
  file (issue #162)
- Service startup is modified so a guaranteed set of services is always
  started, allowing services to use services that are started after them
  (issue #145)
- Add a locking AccessCoordinator and add a configuration option for
  specifying the access coordinator (issue #138)
- Update license to GPLv2 + classpath exception.  The classpath exception
  has been applied to all classes in the sgs-server-api and
  sgs-server-internal-api modules.  The other modules remain as pure
  GPLv2 (issue #164)
- Also fix issues #5, #32, #44, #48, #61, #73, #82, #89, #98, #109, #113,
  #115, #126, #130, #131, #136, #142, #143, #144, #149, #151, #152,
  #153, #154, #155, #158, #160, #163, #165, #166, #170

Version 0.9.9:
- Add pluggable client session protocol and transport layers (issue #26)
  - Add com.sun.sgs.protocol and com.sun.sgs.transport packages.
  - Clarify the meaning of "delivery guarantee" (no longer
    "delivery requirement") in the classes ClientSession,
    ChannelManager, and Channel. 
  - Add method ClientSession.send(ByteBuffer, Delivery).
  - Add method Delivery.supportsDelivery(Delivery).
  - Add new exception class com.sun.sgs.app.DeliveryNotSupportedException.
  - Removed APP_PORT property, replaced in part, by transport specific
    property. Use com.sun.sgs.impl.transport.tcp.listen.port to set the
    port of the (default) TCP transport. Otherwise the port will default
    to 62964.
- Switch to BDB JE 3.3.75 (issue #122)
- Expose monitoring data through JMX (issue #35)
- Improve node shutdown mechanism (issues #37 and #112)
- Split unit-level and integration-level tests into separate execution
  phases using a custom annotation and JUnit filters (issue #146)
- Add support for specifying default logging properties in a
  configuration file embedded in application JAR (issue #147)
- Also fix issues #125, #129, #132, #133, #137, #139, #140, #141, #150

Version 0.9.8:
- Add ScalableDeque and ScalableList implementations
- Add object access and contention tracking capabilities
- Improve concurrency of login authentication (issue #96)
- Improve profiling output by adding descriptive information to the
  AbstractKernelRunnable class (issue #91)
- Improve performance of markForUpdate and removeObject methods of the
  DataManager
- Add configurable support for optimistic write locking in data service
- Improve documentation of wire protocol specification
- API changes:
  - Decoupled API classes from implementation classes (issue #102)
  - Add support for pluggable behavior of AppContext with addition of
    com.sun.sgs.internal package (issue #101)
  - Move API classes into separate sgs-server-api.jar file
- Add profiling support for non-task related data (issue #111)
- Remove dependency on Apache MINA and SLF4J
- Restructure distribution (issue #103)
  - Eliminate sgs.sh and sgs.bat bootstrapper scripts in favor of platform
    independent Java bootstrapper
  - Integrate BDB files into unified file hierarchy
  - Add BDB-JE to the distribution
  - Modify data store so that it automatically creates the database directory
    if it does not exist
- Also fix issues #21, #77, #78, #86, #87, #88, #90, #93, #95, #105, #106, #110

Version 0.9.7:
- Improve channel service concurrency by removing channel sets (issue
  #18), and by caching channel server proxies (issue #19)
- Improve concurrency of channel server notifications sent by channel
  coordinators
- Improve task service concurrency (issue #46)
- Add support for Berkeley DB Java edition, including improved
  allocation concurrency in the data service (issue #16)
- Modify the watchdog service to always consider the node alive in
  single node mode (issue #4)
- Modify the client session and channel services to retry tasks after
  network failures (issues #1 and #2)
- Modify the client session handler to allow clients to disconnect on
  login failures and on logout (issues #7, #8 and #9)
- Add support for dynamic and finer-grained profiling (issues #33 and
  #34)
- Add a transactional log manager (issue #20)
- Require Java 6
- Also fix issues #6, #10, #13, #22 and #69

Version 0.9.6:
- Support multi-node operation
  - Add WatchdogService and NodeMappingService
  - Modify the TaskService, ChannelService, and ClientSessionService to
    use the new services
- API changes:
  - Use ByteBuffer for channel and session message parameters
  - Remove subset channel sends
  - Make ClientSession and Channel managed objects
  - Add Channel message filtering
  - Loosen consistency guarantees for obtaining channel sessions
  - Add exceptions for resource failures
  - Make miscellaneous channel convenience changes
  - Add new Delivery constant
  - Add type parameter to ManagedReference
- Implement ManagedReferenceImpl.equals and hashCode
- Remove support for running multiple applications
- Detect managed objects with serialization readResolve or writeReplace
  methods
- Simplify scheduler and kernel interfaces
- Simplify SGS protocol
- Increase default BDB data store cache size

Version 0.9.5:
- Improve I/O throttling in the Client Session and Channel services
- Add scalable map and set implementations
- Add ManagedObjectRemoval interface
- Modify Transaction.checkTimeout to abort timed-out transactions

Version 0.9.4:
- Fix a bug that caused timeout exceptions that occurred when
  deserializing managed references to not be retried
- Modify TCP connection establishment to disable Nagle's Algorithm,
  to reduce latency

Version 0.9.3:
- Document the network protocol and public server configuration
  properties
- Perform service and application initialization with an unbounded
  transaction timeout
- Reduce the default task transaction timeout to 100 ms
- Modify the ClientSessionService to use the CompactId representation
  for session IDs in protocol messages -- this is an incompatible
  network format change
- Modify the DataService to
  - Compress object data by storing class descriptors separately -- this
    is an incompatible database format change
  - Log information about modified objects that are not marked for
    update
  - Add support for a thread that periodically checkpoints the database,
    and for automatically removing database log files
  - Improve handling of exceptions thrown by managed object toString
    methods

Version 0.9.2:
- Fix a bug that caused clients not to receive a disconnected callback
  if the initial server connection failed
- Use a compact format for channel identifiers
- Implement an initial multi-node version of the DataService
- Update profiling to include information about transaction
  participants, and to include object and byte counts

Version 0.9.1:
- Fix a bug that could cause channel messages to be delivered
  out-of-order
- Improve channel message delivery performance
- Include native libraries for Mac OS X and Linux with x86 processors
- Improve debugging output for deadlocks

Version 0.9:
- First release with new API and architecture
