#
# Project Darkstar server properties
#
# When booting a Project Darkstar server using the sgs-boot.jar,
# this configuration file is the default application configuration used.
#

# ======================================================================
# Required Properties
#
# These properties are required for some or all node types.
#
# ======================================================================

# The name of the application.  If running in a multi-node configuration,
# this name must be the same for each node.  In most situations, this
# property should not be set here, but rather in the app.properties
# configuration file embedded in the application jar file.
#
#com.sun.sgs.app.name

# The AppListener for the application, specified as a fully qualified
# class name.  In most situations, this
# property should not be set here, but rather in the app.properties
# configuration file embedded in the application jar file.
#
#com.sun.sgs.app.listener

# The root directory for the application, which specifies local file
# system space available for Project Darkstar use.  If the Project Darkstar
# server is started using the sgs-boot.jar bootstrapper, it is run 
# with SGS_HOME as the current working directory.  In this scenario, this
# path can be a relative path to that directory.
#
com.sun.sgs.app.root=data

# ======================================================================
# Client Connection Listen Port (Optional)
#
# The TCP port on which to listen for client connections.
# By default the server will use the TCP transport for client-server
# communication. Use this property to override the transport's
# default port number.
# In most situations, this
# property should not be set here, but rather in the app.properties
# configuration file embedded in the application jar file.
#
#com.sun.sgs.impl.transport.tcp.listen.port=62964


# ======================================================================
# Node Type Configuration Properties (Optional)
#
# A Project Darkstar server can be run in a single node or multi-node
# configuration.  Use these properties to specify which node type to
# run.
#
# ======================================================================

# Set this property to specify the node type for this server
# Valid values are singleNode, coreServerNode, and appNode
# If no value is specified, singleNode is used by default
#
#com.sun.sgs.node.type=singleNode

# The name of the host the core Project Darkstar Server node is running on.
# This property should only be set if the value of com.sun.sgs.node.type
# is equal to appNode
#
#com.sun.sgs.server.host


# ======================================================================
# Core Server Port Properties (Optional)
#
# These properties can be used by either core server or application
# nodes in a multi-node configuration. The core server node may be 
# configured to specify ports to be used on the core server machine.
# If these properties are used, they must be set to the same value on 
# each application node.
#
# ======================================================================

# The TCP port for the data service's shared network server
#
#com.sun.sgs.impl.service.data.store.net.server.port=44530

# The TCP port for the watchdog service's internal server
#
#com.sun.sgs.impl.service.watchdog.server.port=44533

# The TCP port for the node mapping service's internal server
#
#com.sun.sgs.impl.service.nodemap.server.port=44535


# ======================================================================
# DataService Properties (Optional)
#
# These properties control the implementation of the DataService.
#
# ======================================================================

# The directory in which to store database files.  Each single node or core
# server node requires its own, unique directory
#
#com.sun.sgs.impl.service.data.store.DataStoreImpl.directory

# The name of the class that implements the underlying database.  The 
# default value selects a database implementation based on Berkeley DB.
# Optionally, Berkeley DB Java Edition can be specified.  Note that the
# value of this property will be overridden by the bootup procedure
# if the BDB_TYPE property in sgs-boot.properties is specified.
#
#com.sun.sgs.impl.service.data.store.db.environment.class=com.sun.sgs.impl.service.data.store.db.bdb.BdbEnvironment
#com.sun.sgs.impl.service.data.store.db.environment.class=com.sun.sgs.impl.service.data.store.db.je.JeEnvironment

# The size in bytes of the Berkeley DB cache.  The value must not be less than
# 20000.  Using a cache too small can introduce significant reduction in
# performance
#
#com.sun.sgs.impl.service.data.store.db.bdb.cache.size=128000000

# Whether to automatically remove database log files that are no longer needed.
# Note that automatic log file removal is likely to make catastrophic recovery
# of the database impossible, because log files that may be needed will not
# have been backed up.
#
#com.sun.sgs.impl.service.data.store.db.bdb.remove.logs=false

# ======================================================================
#
# Watchdog Service Properties (Optional)
#
# ======================================================================

# The time interval, in milliseconds, in which application nodes must contact
# the watchdog service's internal server in order to be considered alive.
# This time interval is sent to each application node during start up, when
# the application node registers with the watchdog's internal server. The
# interval must be greater than or equal to 100 milliseconds. Using a renew
# interval that is too small may cause some application nodes to be considered
# failed by the WatchdogService when they are very busy. Using an interval that
# is too large will increase the amount of time the system takes to respond to
# failed nodes. The default value for this property is 1000 in a multi-node
# configuration and Integer.MAX_VALUE in a single node configuration.
#
#com.sun.sgs.impl.service.watchdog.server.renew.interval

# ======================================================================
# ClientSessionService Properties (Optional)
#
# These properties control the implementation of the ClientSessionService. 
#
# ======================================================================

# Whether to permit or deny a new login request for a user that is already
# logged in. If the property is false, a new user with the same identity as 
# an existing user is not permitted to log in. If the property is true, the 
# user's existing session is disconnected, and the new login is allowed to 
# proceed.
#
#com.sun.sgs.impl.service.session.allow.new.login=false

# The time, in milliseconds, in which a disconnecting client is allowed to
# close a connection before it is closed by the server.  The delay must be
# greather than or equal to 200 milliseconds.
#
#com.sun.sgs.impl.service.session.disconnect.delay=1000

# ======================================================================
# System Properties (Optional)
#
# These properties control the implementation of the core components of
# the system including identity management, profiling, and task scheduling. 
#
# ======================================================================

# A colon separated list of IdentityAuthenticators to use for the application.
# The order defines the precedence when authenticating an identity. The
# default authenticator simply accepts any name-password pair.
#
#com.sun.sgs.app.authenticators=com.sun.sgs.impl.auth.NullAuthenticator

# The profiling level.  Valid levels are
#  min - minimal profiling data is collected
#  medium - more data is collected, but is still appropriate for monitoring a
#           production system
#  max - all available profiling data is collected.  This level may only be
#        appropriate for debugging
#
#com.sun.sgs.impl.kernel.profile.level=min

# A colon separated list of profile listeners, which consume profile output.
# See the individual class javadoc for profile listener implementations.
#
#com.sun.sgs.impl.kernel.profile.listeners

# The number of initial threads used to process transactional tasks
#
#com.sun.sgs.impl.kernel.transaction.threads=4

# The number of initial threads used to process non-transactional tasks
#
#com.sun.sgs.impl.kernel.task.threads=4

# ======================================================================
# Additional Service Properties (Optional)
#
# These properties provide support for enabling additional services and
# managers in the system.
#
# ======================================================================

# A colon separated list of additional Services to start after all of the
# core services have started. Each Service should be specified as a fully
# qualified class name. Services will be started in the order that they
# are specified in this list.
#
#com.sun.sgs.services

# A colon separated list of additional Managers to use. Each Manager should
# be specified as a fully qualified class name. This list must contain the
# same number of classes as the com.sun.sgs.services list described above.
# Each Manager in the list is paired with the corresponding Service in the
# services list at the same index.  To specify a Service with no Manager,
# leave the appropriate element in the list empty.
#
#com.sun.sgs.managers

# A colon separated list of node type identifiers that indicate which node
# types each respective Service/Manager pair in the lists described above
# should be started on. This list must contain the same number of items
# as the Service and Managers lists. Valid values for a node type are:
#  SINGLE
#  CORE
#  APP
#  SINGLE_OR_CORE
#  SINGLE_OR_APP
#  CORE_OR_APP
#  ALL
# If this property is omitted, all Services will default to ALL
#
#com.sun.sgs.services.node.types

# ======================================================================
# Debug and Test Properties
#
# These properties are most useful for debugging and testing, and are not
# typically useful for production deployments. 
#
# ======================================================================

# The maximum amount of time in milliseconds that a transaction be permitted
# to run before it is a candidate for being aborted.  Increasing this timeout
# is useful when attaching a debugger to a node, but can increase game latency.
#
#com.sun.sgs.txn.timeout=100

